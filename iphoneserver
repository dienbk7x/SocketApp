from twisted.internet.protocol import Protocol, Factory
from twisted.internet import reactor

import RPi.GPIO as GPIO
import os

GPIO.setmode(GPIO.BOARD) ## Use board pin numbering
GPIO.setup(7, GPIO.OUT) ## Setup GPIO Pin 7 to OUT

class RaspberryLight(Protocol):
	def connectionMade(self):
		self.transport.write("""pi connected""")
		self.factory.clients.append(self)
		print "clients are ", self.factory.clients

	def connectionLost(self, reason):
		print "connection lost ", self.factory.clients
		self.factory.clients.remove(self)


	def dataReceived(self, data):
		msg = ""

		if (data == 'P7H'):
			msg = "Pin 7 is now High"
			self.transport.write("""Lights Off""")
			GPIO.output(7, True)

		elif (data == 'P7L'):
			msg = "Pin 7 is now Low"
			self.transport.write("""Lights On""")
			GPIO.output(7, False)

		if (data == 'reboot'):
			msg = "REBOOTING"
			os.system('reboot')

		if (data == 'shutdown'):
			msg = "SHUTTING DOWN"
			os.system('sudo shutdown now -h')


			print msg

factory = Factory()
factory.protocol = RaspberryLight
factory.clients = []

reactor.listenTCP(7777, factory)
print "RaspberryLight server started"
reactor.run()
